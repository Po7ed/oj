#include <bits/stdc++.h>
#define int long long

using namespace std;

const int N = 200005, INF = 1e18 + 5;

struct edge {
    int to, w, nxt;
} e[N << 1]; 

int n, tot = 0, cnt = 0, ans1 = 0, ans2 = INF, res, head[N], cir[N], vis[N], f[N], w[N], l[N], l0[N], r[N], r0[N];

void add(int x, int y, int w) { 
    e[++tot] = (edge){y, w, head[x]}, head[x] = tot; 
} 

int Find(int x, int fa = -1) {
    if (vis[x])
        return x;
    else
        vis[x] = -1; 
    for (int i = head[x]; ~i; i = e[i].nxt)
        if (e[i].to != fa) {
            res = Find(e[i].to, x);
            if (res)
                return cir[++cnt] = x, w[cnt] = e[i].w, vis[x] = 1, res == x ? 0 : res;
        }
    return 0;
}

void dfs(int x, int fa = -1) {
    for (int i = head[x]; ~i; i = e[i].nxt)
        if (vis[e[i].to] != 1 && e[i].to != fa)
            dfs(e[i].to, x), ans1 = max(ans1, f[x] + f[e[i].to] + e[i].w), f[x] = max(f[x], f[e[i].to] + e[i].w);
}

signed main() {
    freopen("tie.in", "r", stdin);
    freopen("tie.out", "w", stdout);
    scanf("%lld", &n);
    memset(vis, 0, sizeof(vis));
    memset(f, 0, sizeof(f));
    memset(head, -1, sizeof(head));
    for (int i = 1, x, y, w; i <= n; i++)
        scanf("%lld%lld%lld", &x, &y, &w), add(x, y, w), add(y, x, w);
    Find(1), w[0] = 0;
    for (int i = 1; i <= cnt; i++)
        dfs(cir[i]), w[i] += w[i - 1]; 
    res = l[0] = l0[0] = -INF;
    for (int i = 1; i <= cnt; i++)
        l0[i] = max(l0[i - 1], f[cir[i]] + w[i] + res), l[i] = max(l[i - 1], f[cir[i]] + w[i]), res = max(res, f[cir[i]] - w[i]);
    res = r[cnt + 1] = r0[cnt + 1] = -INF;
    for (int i = cnt; i >= 1; i--)
        r0[i] = max(r0[i + 1], f[cir[i]] - w[i] + res), r[i] = max(r[i + 1], f[cir[i]] + w[cnt] - w[i]), res = max(res, f[cir[i]] + w[i]);
    for (int i = 1; i <= cnt; i++)
        ans2 = min(ans2, max(l[i - 1] + r[i], max(l0[i - 1], r0[i]))); 
    return printf("%lld\n", max(ans1, ans2)), 0;
}


#include<bits/stdc++.h>
#define MAXN 200010
using namespace std;
typedef long long ll;
struct node{ll id,dis;};
struct edge{ll pre,to,w;};
stack<node>s;
node cir[MAXN];
edge e[MAXN<<1];
ll n,m,ans1,ans2=0x7f7f7f7f7f7f7f7f,cnt=1,tim=1,u,v,w;
ll head[MAXN],dis[MAXN],dia[MAXN],dep[MAXN],pre[MAXN],suf[MAXN],vis[MAXN],a[MAXN],b[MAXN],c[MAXN],d[MAXN];
bool iscir[MAXN];
void ad(ll u,ll v,ll w){
	e[++cnt].pre=head[u],e[cnt].to=v,e[cnt].w=w,head[u]=cnt;
}
bool fc(ll now,ll fr){
	s.push((node){now,e[fr].w}); vis[now]=tim;
	for(int i=head[now];i;i=e[i].pre){
		if((i^1)==fr) continue;
		if(vis[e[i].to]!=tim) {if(fc(e[i].to,i)) return 1;}
		else{
			while(s.top().id!=e[i].to){
				node p=s.top();s.pop();
				cir[++m]=p,iscir[p.id]=1;
			}
			cir[++m]=(node){e[i].to,e[i].w},iscir[e[i].to]=1;
			s.pop(); return 1;
		}
	}
	s.pop();
	return 0;
}
ll bfs(ll st){
	ll res=st; tim++;
	queue<ll> q; q.push(st);
	dis[st]=0,vis[st]=tim;
	while(!q.empty()){
		ll now=q.front(); q.pop();
		for(int i=head[now];i;i=e[i].pre){
			if(vis[e[i].to]!=tim&&!iscir[e[i].to]){
				dis[e[i].to]=dis[now]+e[i].w;
				if(dis[e[i].to]>dis[res]) res=e[i].to;
				q.push(e[i].to); vis[e[i].to]=tim;
			}
		}
	}
	return res;
}
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	freopen("tie.in","r",stdin);
	freopen("tie.out","w",stdout);
	cin>>n; for(int i=1;i<=n;i++) cin>>u>>v>>w,ad(u,v,w),ad(v,u,w);
	fc(1,0);
	//in cir
	for(int i=1;i<=m;i++){
		iscir[cir[i].id]=0;
		ll p=bfs(cir[i].id);
		dep[i]=dis[p],dia[i]=dis[bfs(p)];
		ans1=max(ans1,dia[i]);
		iscir[cir[i].id]=1;
	}
	//not in
	for(int i=2;i<=m;i++) pre[i]=pre[i-1]+cir[i-1].dis;
	for(int i=m-1;i>=1;i--) suf[i]=suf[i+1]+cir[i].dis;
	for(int i=1;i<=m;i++) a[i]=max(a[i-1],dep[i]+pre[i]);
	for(int i=m;i>=1;i--) b[i]=max(b[i+1],dep[i]+suf[i]);
	for(ll i=1,mx=0;i<=m;i++) c[i]=mx+pre[i]+dep[i],mx=max(mx,dep[i]-pre[i]);
	for(ll i=m,mx=0;i>=1;i--) d[i]=mx+suf[i]+dep[i],mx=max(mx,dep[i]-suf[i]);
	for(int i=1;i<=m;i++) c[i]=max(c[i],c[i-1]);
	for(int i=m;i>=1;i--) d[i]=max(d[i],d[i+1]);
	for(int i=1;i<m;i++) ans2=min(ans2,max(a[i]+b[i+1]+cir[m].dis,max(c[i],d[i+1])));
	cout<<max(ans1,ans2);
	return 0;
}